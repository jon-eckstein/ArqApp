
Need to coordinate this thing...

Basically I have a receiver and a sender...
I have to somehow send packets to the receiver and vice-a-versa

Should I use an InFlightManager to manage all the frames in flight?
	-If so, ohw would that work?
	-Lets take the sending example..
		-what initalises the send?
			-proabably some kind of button push or timer...
			-ok so the button push will tell the Receiver to send, then where does the packet go?
			-Maybe the button push can tell the coordinator to send, which tells the receiver to send which pushes the new frame to the coordinator...
		-what about a receive..
			-if this is the server then it sends back an ack...so all receives will send an ack back which can be picked up by the coordinator....
	-So really this coordinator is really the network...and it can have an array of frames, so acks and some data,,it can kill the frames and it can take handle everything...
	-So it will need a reference to the sender and receiver and not the other other way around....this makes more sense in a way.  So basically I need to rename the InFlightManager to Network.


I want to space out the packets a little more such that it each packete can go indepently and not have it send x at a time...
sothen for each iteration the sender can only send one packet...
I feel like had this before...no I was always sending more then one packet...I think
So it's iteration 1...can I send? yes, send a packet...iteration 2, can I send? yes, send a packet...

So I need to start rendering the view for this thing...

There are some issues here:
[] Which framework should I use
	-it needs to support templating in a clean way.
[] How do I create a view for eaach packet?  Should I create a view for each packet?
	-it seems like a lot of frameworks assume you have one model per view...
	-maybe i have one model per view but i have a collection of models (packets) with thier own view.
	-what's different here is that i have an actual model and not a viewmodel...
	-with backbone you specify a view with a given model object...so when a new packet comes into existence, how do I create a view for this?
	-maybe I need to use a collection?
		-a collection may be a good thing here...I can use the collectionOfPackets
	-so i'll need to change my model such that they extend these backbone objects
	-so in this way i'll need to backup the code..now may be a good time to throw it up on github and familiarize yourself with all that again.
	-I think knockout is a really good option.  The only real issue is that I have to corrupt my model with KO stuff...not the biggest deal to get things done.
[] How do i trigger a change in the view when the packet increments?  I want to be able to increment the box (or whatever) along the x axis whenever it gets incremented...a user isn't doing the incrementing it's the network..
	so maybe this is where events come in?


So how do I want this thing to look like is the question?
-->do I want it going up-down or left-right?
-->left-right is more accurate for these kinds of things becuase it can show time scaling, plus that's how the book is doing it.
-->then how do i scroll when
-->let's say I go vertical like the rest of 'em and have the little boxes for ports...
-->I'll still have this observable list...which I can utilize but I have to space it out differently...
-->could i use a table for it?  dude let's just get it done...use a freaking table....The thing is I need everything to line up perfectly
-->I found a coffeescript pong game that's really cool and very simple...it uses the canvas and each object has a draw to it.
	--https://github.com/chrissharkey/pong/blob/master/pong.coffee
-->Now how in the fuck can I do that?
-->I need a sender array of rectangles and a receiver array of rectangles and then a rectangle for each packet (data/ack)
-->when a new packet gets added I need to draw it at it's correct position then increment it each time...
-->I guess that should be easy using like a clearCanvas and then draw each time.


What to do:
-I got the front-end to a good point where i can see all the packets going back and forth and I can delete the packet when I want to.
-So now lets get into the meat of the algo...
-theres a couple things I can do here.
	-1)Simple Sliding Window
		-if the sender doesn't get an ack back it resends the blasted file, then resends from the point where it doesn't have an ack.
		-i'll need to get some kind of timeout thing going...
		-I can use the send() function to count timeouts, I don't need a seperate timer.A

OK, I'm trying to figure out this timeout thing..On the sender side how is this going to work?
Every time I send a frame I need to start the clock on the slot..
every clock tick i need to increment the slot clock for each frame...
how do i now a frame has been sent? it has a slot..so really i don't need an array of total slots i need an array that's just the window size...
when i send i put it in the array..where?  well i could do seqNum % windowSize ??? right? maybe...
so before i send i say if buffer[seqNum % windowSize] != null
why dont we go back toi simpler scenario where i have a full array of slots...
in this way I can say 
  foreach slot where slot.num between (lastFrameSent - (lastAckReceived + 1))
	slot.num++
	if(slot.num > timeout)
		clear slot
		//now what? resend the frame
		lastFrameSent = lastFrameSent-1 //this wont work if out of order...
		lastFrameSent = lastAckReceived //this also wont work for out of order but it will work for StopAndWait as well as GoBackN


	//now I can send as per usual...


